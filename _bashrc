##  General ~/.bashrc of hnfong, version 1.1 ##

if [[ "$PS1" ]]; then
    # Load user config
    if [[ -f ~/.hnfong.conf ]]; then
        source ~/.hnfong.conf
    fi

    ############### --- General Options --- ###############

    # Show something when Ctrl+C is pressed (mainly to avoid confusion by
    # spectators, since I use this key often and they'd think I pressed enter
    trap 'echo -n \(Ctrl+C\)' SIGINT

    # enable color support of ls and also add handy aliases
    if [[ "$OSTYPE" =~ "linux" ]]; then
        eval `dircolors`
        alias ls='ls --color=auto'
        alias ll='ls -l --color=auto'
    else
        alias ls='ls -G'
    fi

    alias rm='rm -i'
    alias mv='mv -i'
    alias cp='cp -i'
    alias r='fc -s'
    alias vi='vim -O'
    alias ff='find . -name'
    alias vigl='VIGLTMP="`mktemp /tmp/vigl-XXXXX`.gitlog"; git log -n 100 > "$VIGLTMP" && vi "$VIGLTMP"'
    alias vigll='VIGLTMP="`mktemp /tmp/vigl-XXXXX`.gitlog"; git lll -n 100 > "$VIGLTMP" && vi "$VIGLTMP"'
    alias h='helper'
    alias gpr='git pull --rebase'
    alias sw='swift'

    HISTSIZE=100000
    HISTIGNORE="ls:exit:ps auxf";

    function _print_branch() {
        # Originally this was done using "cd", but somehow MacOS's Terminal
        # didn't like it and printed a bunch of weird messages that look like
        # the terminal was going to exit...
        local _pwd=$PWD
        while [[ ! -f "$_pwd/".git/HEAD && "$_pwd" != "/" ]]; do
            _pwd=$(dirname "$_pwd")

            # Failsafe
            if [[ $_pwd = "" ]]; then
                _pwd=/
            fi
        done

        if [[ "$_pwd" != "/" ]]; then
            local mybranch=$(cat "$_pwd"/.git/HEAD)
            if [[ "$mybranch" =~ "heads/" ]]; then
                echo '['"${mybranch//*heads\//}"']'
            else
                echo '[(unknown)]'
            fi
        fi
    }

    function _display_git_branch() {
        if [[ "$SI_CONFIG_PROMPT_GIT_LOCATIONS" ]]; then
            for loc in $SI_CONFIG_PROMPT_GIT_LOCATIONS; do
                if [[ "$PWD" =~ $loc ]]; then
                    _print_branch
                    return 0
                fi
            done
        fi
        if [[ "$SI_CONFIG_PROMPT_GIT_GUESS" = 1 && -d .git ]]; then
            _print_branch
        fi
    }

    # set prompt
    function _hnfong_set_ps1() {
        if [ "$TERM" = "screen" ]; then
            if [ -z "$MYSCREENTITLE" ]; then
              TITLEPS1='\[\ek\W$(_display_git_branch)\e\\\]\[\033]0;\h:(screen)\007\]'
            else
              TITLEPS1='\[\ek('"$MYSCREENTITLE"')\e\\\]\[\033]0;\h:(screen)\007\]'
            fi
        else
            TITLEPS1='\[\033]0;\h:\W\007\]'
        fi

        # constants
        local TERME='\[\e[0m\]'
        local TERME30='\[\e[01;30m\]' # black
        local TERME31='\[\e[01;31m\]' # red
        local TERME32='\[\e[01;32m\]' # green
        local TERME33='\[\e[01;33m\]' # yellow
        local TERME34='\[\e[01;34m\]' # blue
        local TERME35='\[\e[01;35m\]' # magenta
        local TERME36='\[\e[01;36m\]' # cyan
        local TERME37='\[\e[01;37m\]' # white

        local TERME032='\[\e[00;36m\]' # non-bold green

        if [ "$SI_CONFIG_FANCY_PROMPT" = "1" ] && [ "$TERM" != "dumb" ]; then
            local PROMPT_HOSTNAME="\h"
            if [[ "$SI_CONFIG_PROMPT_HOSTNAME" ]] ; then
                local PROMPT_HOSTNAME="$SI_CONFIG_PROMPT_HOSTNAME"
            fi
            if [ "$COLUMNS" ] && [ "$COLUMNS" -lt 150 ]; then
                PS1="$TITLEPS1$TERME34$SHLVL$TERME33.$TERME31$PROMPT_HOSTNAME:$TERME32\W$TERME032\$(_display_git_branch)$TERME34>$TERME "
            else
                PS1="$TITLEPS1$TERME34$SHLVL$TERME33.$TERME31$PROMPT_HOSTNAME:$TERME32\w$TERME032\$(_display_git_branch)$TERME34>$TERME "
            fi
            if [[ "$SI_CONFIG_PROMPT_TIME" = 1 ]]; then
                PS1="\[\e[s\e[1000C\e[8D\t\e[u\]$PS1"
            fi
        else
            PS1='\u@\h:\w\$ '
        fi
    }
    _hnfong_set_ps1

    # workaround for screen (companion settings in .vimrc)
    if [ "$SI_CONFIG_VIM_SCREEN_WORKAROUND" = "1" ]  && [ "$TERM" = "screen" ]; then
        export REALTERM='ansi'
    else
        export REALTERM="$TERM"
    fi

    # set key bindings.
    if [[ "$SI_CONFIG_BIND_FUNCTION_KEYS" = 1 ]]; then
        # \201 is an unfortunate ugly hack due to http://unix.derkeiler.com/Newsgroups/comp.unix.shell/2003-11/0926.html
        # more information is found at http://groups.google.com/group/gnu.bash.bug/browse_thread/thread/faf41bc157056e54

        bind -x $'"\201":git status'                            # bind F1 to git status.
        bind -x $'"\202":git diff --color HEAD'                    # bind F2 to git diff
        bind -x $'"\203":git whatchanged --pretty=oneline'        # bind F3 to git whatchanged
        bind -x $'"\204":history'                                # bind F4 to git whatchanged

        if [[ "$REALTERM" =~ xterm ]]; then
            bind '"\eOP":'$'"\201"'
            bind '"\eOQ":'$'"\202"'
            bind '"\eOR":'$'"\203"'
            bind '"\eOS":'$'"\204"'
        else
            bind '"'`tput kf1`'":"\201"'
            bind '"'`tput kf2`'":"\202"'
            bind '"'`tput kf3`'":"\203"'
            bind '"'`tput kf4`'":"\204"'
        fi
    fi

    # set default umask
    umask 022

    if [ "$SI_CONFIG_BASH_COMPLETION" = "1" ]; then
        if [ "$SI_CONFIG_WARN_BASH_COMPLETION" = "1" ]; then
            echo 'Note: enabling bash completion'
        fi
        if [[ -f /etc/bash_completion ]]; then
            source /etc/bash_completion
        fi
    fi

    if [ "$SI_CONFIG_TIMEOUT" -gt 0 ]; then
        TMOUT="$SI_CONFIG_TIMEOUT"
    fi

    _did_just_display_prompt=""

    function _pre_cmd() {
        if [[ -z "$_did_just_display_prompt" ]]; then
            return
        fi
        _did_just_display_prompt=""
        lastcmd=`history | tail -n 1 | awk '{print $2}'`
        if [[ "$lastcmd" = "make" || "$lastcmd" = "svn" || "$lastcmd" = "cp" || "$lastcmd" = "sleep" ]]; then
            _TIME_BEFORE_COMMAND="`date +%s`"
            # echo "I will notify you when this finishes, if it takes a long time"
        fi

    }

    function _post_cmd() {
        if [[ -n "$_TIME_BEFORE_COMMAND" ]]; then
            local _TIME_AFTER_COMMAND="`date +%s`"
            if [[ $(($_TIME_AFTER_COMMAND - $_TIME_BEFORE_COMMAND)) -gt 30 ]]; then
                beep_in_background
            fi
            _TIME_BEFORE_COMMAND=""
        fi
        _did_just_display_prompt=1
    }

    function gg {
        if [ -z "$1" ]; then
            cd "`cat /tmp/last_go`"
        elif [ -d "$1" ]; then
            if [ "${1:0:1}" = "/" ]; then
                echo "$1" > /tmp/last_go
            elif [ "$PWD"/"$1" ]; then
                echo "$PWD"/"$1" > /tmp/last_go
            else
                echo "$1" > /tmp/last_go
            fi
            gg
        else
            echo `expandgo "$1"` > /tmp/last_go
            gg
        fi
    }

    function j {
        if [ -z "$1" ]; then
            cd `cat /tmp/last_go`
        elif [ -d "$1" ]; then
            if [ "${1:0:1}" = "/" ]; then
                cd "$1"
            elif [ "$PWD"/"$1" ]; then
                cd "$PWD"/$1
            else
                cd "$1"
            fi
        else
            cd "`expandgo $1`"
        fi
    }

    function mk {
        local PWDBEFOREMK="`pwd`"
        local MK__RET=1
        while [[ "$PWD" != "/" ]]; do
            echo "Trying make in $PWD ..."
            if [[ -f Makefile ]]; then
                make "$@"
                MK__RET="$?"
                if [[ "$MK__RET" = "0" ]]; then
                    touch .lastmake
                fi
                break
            fi
            if [[ -f gradlew ]]; then
                ./gradlew "$@"
                break
            fi
            cd ..
        done
        cd "$PWDBEFOREMK"
        [ "$MK__RET"  = "0" ];
    }

    function settitle {
        MYSCREENTITLE="$1"
        _hnfong_set_ps1
    }

    ############# --- Machine Specific Scripts --- #############

    skelpath=$(python -c 'import os, sys; print os.path.dirname(os.path.realpath(sys.argv[1]))' "${BASH_SOURCE[0]}")
    if [ -f "$skelpath"/_bashrc.$(hostname)  ]; then
        source "$skelpath"/_bashrc.$(hostname)
    fi

    if [ -f ~/.bashrc.local ]; then
        source ~/.bashrc.local
    fi

    # See http://glyf.livejournal.com/63106.html, http://superuser.com/questions/175799/does-bash-have-a-hook-that-is-run-before-executing-a-command
    PROMPT_COMMAND="_post_cmd"

    export WITH_FRONTEND=true   # For frontend developments
    trap '_pre_cmd' DEBUG
fi

export PATH="$HOME/.iworkpietools/brew/bin:$PATH" # IWORKBREWPATH
. "$HOME/.cargo/env"
