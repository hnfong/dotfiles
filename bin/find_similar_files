#!/usr/bin/env python3

import hashlib
import os
from difflib import SequenceMatcher
import sys
import functools

@functools.cache
def get_md5_hashes(file_path):
    """generated by chatgpt"""
    md5_hashes = []

    with open(file_path, 'rb') as file:
        for line in file:
            line = line.strip()
            md5_hash = hashlib.md5(line).hexdigest()
            md5_hashes.append(md5_hash)

    return md5_hashes

@functools.cache
def is_utf8_text_file(file_path, max_line_length=10240):
    """generated by chatgpt, modified by me"""
    try:
        with open(file_path, 'rb') as file:
            try:
                byte_count = 0
                chunk = file.read(max_line_length)
                if not chunk:
                    return False
                lines = b'\n'.join(chunk.split(b'\n')[:-1]).decode('utf-8')
            except UnicodeDecodeError:
                return False
        return True
    except FileNotFoundError:
        return False

def compare_directories(X, Y):
    similar_files = []

    # Get the list of files in directory X
    files_X = get_files_in_directory(X)

    # Get the list of files in directory Y
    files_Y = get_files_in_directory(Y)

    # Compare each file in directory X against each file in directory Y
    total_copied_lines = 0
    for file_X in files_X:
        for file_Y in files_Y:
            similarity = calculate_file_similarity(file_X, file_Y)
            if similarity[0] >= 0.8:
                similar_files.append((file_X, file_Y, similarity))
                print("%.02f %s (%d) %s (%d)" % (similarity[0], file_X, similarity[1], file_Y, similarity[2]))
                total_copied_lines += similarity[1]

    return (similar_files, total_copied_lines)

def get_files_in_directory(directory):
    files = []
    for root, _, filenames in os.walk(directory):
        for filename in filenames:
            file_path = os.path.join(root, filename)
            if is_utf8_text_file(file_path):
                files.append(file_path)
    return files

def calculate_file_similarity(file_X, file_Y):
    assert is_utf8_text_file(file_X)
    assert is_utf8_text_file(file_Y)

    # Check file size similarity
    file_size_X = os.path.getsize(file_X)
    file_size_Y = os.path.getsize(file_Y)
    if file_size_X / file_size_Y > 4 or file_size_Y / file_size_X > 4:
        return (0,0,0)

    hashes_X = get_md5_hashes(file_X)
    hashes_Y = get_md5_hashes(file_Y)

    similarity = SequenceMatcher(None, hashes_X, hashes_Y).ratio()
    return (similarity, len(hashes_X), len(hashes_Y))

if __name__ == '__main__':
    X = sys.argv[1]
    Y = sys.argv[2]
    similar_files = compare_directories(X, Y)
    print(similar_files[1])
