#!/usr/bin/python3

"""
This program reads a string from standard input, extracts all numbers followed
by optional suffixes (k, K, m, M, g, G), converts them to their base value
(kilo=1024,M=1024*1024,etc.), calculates their sum, and prints the total sum as
well as the sum in kilobytes (K), megabytes (M), and gigabytes (G).

The program handles numbers with commas as thousand separators and supports
both lowercase and uppercase suffixes.

Example input:

```
1.5G, 2K, 3M, and 4.2G
500,000K and 600M
```

Example output:
```
7264621772.8
7094357.0 K
6928.0 M
6.0 G
```
"""

import re
import sys
import functools

def kmb_cmp(a, b):
    if a == "" and b == "": return 0
    if a == "": return -1
    if b == "": return 1

    x = {"b":0, "B":0, "k":1, "K":1, "m":2, "M":2, "g": 3, "G": 3}
    suf_a = x.get(a[-1], 0)
    suf_b = x.get(b[-1], 0)

    if suf_a == suf_b:
        x = float(a[:-1]) - float(b[:-1])
        if x == 0:
            return 0
        if x < 0:
            return -1
        if x > 0:
            return 1

    return suf_a - suf_b

NUM_WITH_SUFFIX = re.compile(r'([0-9][0-9\,\.]*)([kKmMbBgG]?)')

input_string = sys.stdin.read()
# print(repr(input_string))
extracted = NUM_WITH_SUFFIX.findall(input_string)

BASE = 1024

def kmb_to_value(kmb):
    if not kmb: return 1
    if kmb in "kK": return BASE
    if kmb in "mM": return BASE * BASE
    if kmb in "gG": return BASE * BASE * BASE
    return 1

z = 0
for item, suffix in extracted:
    # Strip away the commas
    item = item.replace(",", "")
    z += float(item) * kmb_to_value(suffix)

print(z)
print(z // BASE, "K")
print(z // BASE // BASE, "M")
print(z // BASE // BASE // BASE, "G")
