#!/bin/bash

# A script to open files in EDITOR([n]vim) with a little bit of magic.

function usage() {
    echo <<_X_
Usage:
magic_open [OPTIONS] [FILE[:LINE]]

Options:
  -g <pattern>   Search for files using git grep
  -r <pattern>   Search for files using git ls-tree

Examples:
  magic_open x.txt              # Open x.txt
  magic_open x.txt:10           # Open x.txt line 10
  magic_open -g "search term"   # Open files containing "search term"
  magic_open -r "txt"           # Open .txt files in repo

Opens files in nvim, with support for line numbers and git repo searching.

- Opens files in **nvim** with support for **line numbers**.
- If no arguments are provided, opens a file picker in nvim.
- If a **file path** is provided, opens the specified file.
- If a **file:line** is provided, opens the specified file and jumps to the given line.
- Automatically resolves ambiguous paths by searching the file system or git repository.
- Supports **tabbed editing** for multiple files.
- Uses **Telescope** for file selection when no arguments are given.
_X_
}

EDITOR=nvim

function magic_list_files() {
    # later optimization: we can probably avoid running magic_list_files too
    # many times (which is expensive) by saving the output in another temp
    # file.

    # check whether it is a git repo
    pushd . > /dev/null 2>/dev/null
    while [[ ! -d .git && "$PWD" != "/" ]]; do
        cd ..
    done
    local final_pwd=$PWD
    popd > /dev/null 2>/dev/null
    if [[ "$final_pwd" != "/" ]]; then
        git ls-tree -r --name-only HEAD -- . | head -n 500
    else
        find . -type f -maxdepth 2 -size -30M | head -n 500
    fi
}

function front_stripper() {
    local file_path;
    while read file_path; do
        while [[ -n "$file_path" && ! -e "$file_path" ]]; do
            local new_file_path=${file_path#*/}
            if [[ "$file_path" = "$new_file_path" ]]; then
                break;
            fi
            file_path=$new_file_path
        done
        echo $file_path
    done
}

# Obsolete.
function posix_globber() {
    local arg=$1
    local magic_open_temp_file=$2

    # We store this in a temp file because this seems to be the only way to
    # avoid the while loop from running in a subshell
    magic_list_files | grep -F "$arg" | grep "[/^]$arg\$" | head -n 100 | front_stripper > "$magic_open_temp_file"
    # Check whether the temp file has any contents
    if [[ ! -s "$magic_open_temp_file" ]]; then
        magic_list_files | grep -F "$arg" | head -n 99 | front_stripper > "$magic_open_temp_file"
    fi
}

function rust_globber() {
    local arg=$1
    local magic_open_temp_file=$2
    local base=$(basename "$arg")
    fd --glob --hidden --max-depth=3 --max-results=100 '*'"$base"'*' | front_stripper > "$magic_open_temp_file"
    # Check whether the temp file has any contents
    if [[ ! -s "$magic_open_temp_file" ]]; then
        fd --glob --hidden --no-ignore --max-depth=3 --max-results=100 '*'"$base"'*' | front_stripper > "$magic_open_temp_file"
    fi

    # If there is an exact match, only use that
    if rg -q "[/^]$arg\$" "$magic_open_temp_file"; then
        local new_temp_file=$(mktemp)
        rg "[/^]$arg\$" "$magic_open_temp_file" > "$new_temp_file"
        /bin/mv "$new_temp_file" "$magic_open_temp_file"
    fi
}

function editor() {
    if [[ -n "$1" ]]; then
        cmd=$(basename $1)
        cmd=${cmd:0:15}
        if which tmux >/dev/null; then
            tmux rename-window "$cmd"
        fi
    fi
    if [[ -z "$my_line" ]]; then
        if [[ -z "$@" ]]; then
            exec "$EDITOR" -c ':Telescope oldfiles'
        else
            # Check the number of arguments, n
            if [[ "$#" -gt 4 ]]; then
                # If n > 5, open in tabs
                exec "$EDITOR" -p -c 'nmap <RIGHT> gt|nmap <LEFT> gT' "$@"
            else
                exec "$EDITOR" -O "$@"
            fi
        fi
    else
        exec "$EDITOR" $my_line -O "$@"
    fi
}


if [[ "$1" = "--test" ]]; then
    shift
    IS_MAGIC_OPEN_TEST=1
    EDITOR=echo
fi

# Preserve $@ for later use
original_args=("$@")

if [[ "$IS_MAGIC_OPEN_TEST" = "1" && -z "$1" ]]; then
    # Run tests
    cd "$(dirname "$0")"
    mkdir -p ../magic_open_test_environment/
    cd ../magic_open_test_environment/
    echo "Running tests in $(pwd)"
    # Ensure we have the appropriate files in the test environment
    touch a b c t
    touch x.txt y.txt z.txt
    mkdir -p d
    touch d/e d/f d/ggtxt
    touch d/e.txt d/f.txt

    # Test cases
    set -ex
    ../bin/magic_open --test x.txt | diff - <(echo "-O x.txt")
    ../bin/magic_open --test x.txt y.txt | diff - <(echo "-O x.txt y.txt")
    ../bin/magic_open --test x.txt:10 | diff - <(echo "+10 -O x.txt")
    ../bin/magic_open --test x. | diff - <(echo "-O x.txt")
    ../bin/magic_open --test .txt | diff - <(echo "-p -c nmap <RIGHT> gt|nmap <LEFT> gT d/e.txt d/f.txt x.txt y.txt z.txt")
    ../bin/magic_open --test e | diff - <(echo "-O d/e")
    ../bin/magic_open --test t | diff - <(echo "-O t")

    ../bin/magic_open --test asdflkajdflakjfdl | diff - <(echo "-O asdflkajdflakjfdl")
    ../bin/magic_open --test aa bb cc dd ee ff gg | diff - <(echo "-p -c nmap <RIGHT> gt|nmap <LEFT> gT aa bb cc dd ee ff d/ggtxt") # The quotes are gone. Thanks, UNIX.

    ../bin/magic_open --test a/b/c/x.txt | diff - <(echo "-O x.txt")
    ../bin/magic_open --test ~/bin/doesnotexistanywhere12395412.txt | diff - <(echo "-O $HOME/bin/doesnotexistanywhere12395412.txt")
    exit 0
fi

# Case: no arguments, just open as normal without arguments
if [[ -z "$1" ]]; then
    editor
fi

# vi -g '<git grep pattern>'
if [[ "$1" = "-g" ]]; then
    shift
    editor `git grep -l "$1"`
fi
#
# vi -r '<git ls-tree -r>'
if [[ "$1" = "-r" ]]; then
    shift
    editor `git ls-tree -r --name-only HEAD -- . | grep "$1"`
fi

PROCESSED_ARGS=()
for arg in "$@"; do
    if [[ -z "$my_line" && "$arg" =~ :[0-9][0-9]*$ ]]; then  # We can only focus on one line number, apparently
        splitter=(${arg//:/ })
        my_path=${splitter[0]}
        my_line=+${splitter[1]}
        arg="$my_path"
    fi

    if [[ ! -e "$arg" && -n "$arg" && "$arg" != /* && "$arg" != ./* ]]; then
        found=0
        magic_open_temp_file=$(mktemp)
        rust_globber "$arg" "$magic_open_temp_file" # Save found files to $magic_open_temp_file
        while read -r file_path; do
            PROCESSED_ARGS+=("$file_path")
            found=1
        done < "$magic_open_temp_file"
        /bin/rm -f "$magic_open_temp_file"  # Use /bin/rm to avoid any aliases

        if [[ "$found" = "1" ]]; then
            arg=""
        fi
    fi

    if [[ -n "$arg" ]]; then
        fs_arg=`echo "$arg" | front_stripper`

        # only strip the front paths if the file exists with the preceding paths removed.
        if [[ -e "$fs_arg" ]]; then
            arg="$fs_arg"
        fi

        PROCESSED_ARGS+=("$arg")
    fi
done

editor "${PROCESSED_ARGS[@]}"
