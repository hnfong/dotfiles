#!/bin/bash

# set -x

EDITOR=nvim

function magic_list_files() {
    # check whether it is a git repo
    pushd .
    while [[ ! -d .git && "$PWD" != "/" ]]; do
        cd ..
    done
    local final_pwd=$PWD
    popd > /dev/null 2>/dev/null
    if [[ "$final_pwd" != "/" ]]; then
        OUT=`git diff --name-only .`
        if [[ -n "$OUT" ]]; then
            echo "$OUT"
        else
            git ls-tree -r --name-only HEAD -- .
        fi
    else
        find . -type f -maxdepth 2
    fi
}

function front_stripper() {
    local file_path;
    while read file_path; do
        while [[ -n "$file_path" && ! -e "$file_path" ]]; do
            local new_file_path=${file_path#*/}
            if [[ "$file_path" = "$new_file_path" ]]; then
                break;
            fi
            file_path=$new_file_path
        done
        echo $file_path
    done
}

function editor() {
    if [[ -z "$my_line" ]]; then
        if [[ -z "$@" ]]; then
            exec "$EDITOR" -c ':Telescope oldfiles'
        else
            # Check the number of arguments, n
            if [[ "$#" -gt 5 ]]; then
                # If n > 5, open in tabs
                exec "$EDITOR" -p -c 'nmap <RIGHT> gt|nmap <LEFT> gT' "$@"
            else
                exec "$EDITOR" -O "$@"
            fi
            exec "$EDITOR" -O "$@"
        fi
    else
        exec "$EDITOR" $my_line -O "$@"
    fi
}


if [[ "$1" = "--test" ]]; then
    shift
    IS_MAGIC_OPEN_TEST=1
    EDITOR=echo
fi

# Preserve $@ for later use
original_args=("$@")

if [[ "$IS_MAGIC_OPEN_TEST" = "1" && -z "$1" ]]; then
    # Run tests
    cd "$(dirname "$0")"
    cd ../magic_open_test_environment/
    echo "Running tests in $(pwd)"
    # Ensure we have the appropriate files in the test environment
    touch a b c
    touch x.txt y.txt z.txt
    mkdir -p d
    touch d/e d/f

    # Test cases
    set -ex
    ../bin/magic_open --test x.txt | diff - <(echo "-O x.txt")
    ../bin/magic_open --test x.txt y.txt | diff - <(echo "-O x.txt y.txt")
    ../bin/magic_open --test x.txt:10 | diff - <(echo "+10 -O x.txt")
    ../bin/magic_open --test .txt | diff - <(echo "-O x.txt y.txt z.txt")
    ../bin/magic_open --test x. | diff - <(echo "-O x.txt")
    ../bin/magic_open --test asdflkajdflakjfdl | diff - <(echo "-O asdflkajdflakjfdl")
    ../bin/magic_open --test aa bb cc dd ee ff gg | diff - <(echo "-p -c nmap <RIGHT> gt|nmap <LEFT> gT aa bb cc dd ee ff gg") # The quotes are gone. Thanks, UNIX.
    exit 0
fi

# Case: no arguments, just open as normal without arguments
if [[ -z "$1" ]]; then
    editor
fi

# vi -g '<git grep pattern>'
if [[ "$1" = "-g" ]]; then
    shift
    editor `git grep -l "$1"`
fi
#
# vi -r '<git ls-tree -r>'
if [[ "$1" = "-r" ]]; then
    shift
    editor `git ls-tree -r --name-only HEAD -- . | grep "$1"`
fi

PROCESSED_ARGS=()
for arg in "$@"; do
    if [[ -z "$my_line" && "$arg" =~ :[0-9][0-9]*$ ]]; then  # We can only focus on one line number, apparently
        splitter=(${arg//:/ })
        my_path=${splitter[0]}
        my_line=+${splitter[1]}
        arg="$my_path"
    fi

    if [[ ! -e "$arg" && -n "$arg" ]]; then
        found=0
        magic_open_temp_file=$(mktemp)

        # We store this in a temp file because this seems to be the only way to
        # avoid the while loop from running in a subshell
        magic_list_files | grep -F "$arg" | head -n 20 | front_stripper > "$magic_open_temp_file"
        while read -r file_path; do
            PROCESSED_ARGS+=("$file_path")
            found=1
        done < "$magic_open_temp_file"

        if [[ "$found" = "1" ]]; then
            arg=""
        fi
    fi

    if [[ -n "$arg" ]]; then
        arg=`echo "$arg" | front_stripper`

        PROCESSED_ARGS+=("$arg")
    fi
done

editor "${PROCESSED_ARGS[@]}"
