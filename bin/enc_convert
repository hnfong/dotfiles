#!/usr/bin/env python3

"""
Converts between character encodings, especially legacy character encodings.

Usage:
    enc_convert [-tq] [-d <encoding>] [-f] [-F <encoding>] [file]

Options:
    -t          Truncate output to 200 characters
    -q          Quiet mode (useful for figuring out the encoding)
    -d <enc>    Decode input with <enc>
    -f          Fix misencodings
    -F <enc>    Original encoding of the input

If no encoding is specified, the program will try to decode the input with all


"""

import sys
import getopt

suspected_original_encodings = ["big5", "gb18030"]

# From https://docs.python.org/2.4/lib/standard-encodings.html
# This is just a fancy way to put things. Usually trying for cp1251 works.
encodings = """ascii big5 big5hkscs cp037 cp424 cp437 cp500 cp737 cp775 cp850 cp852 cp855 cp856 cp857 cp860 cp861 cp862 cp863 cp864 cp865 cp866 cp869 cp874 cp875 cp932 cp949 cp950 cp1006 cp1026 cp1140 cp1250 cp1251 cp1252 cp1253 cp1254 cp1255 cp1256 cp1257 cp1258 euc_jp euc_jis_2004 euc_jisx0213 euc_kr gb2312 gbk gb18030 hz iso2022_jp iso2022_jp_1 iso2022_jp_2 iso2022_jp_2004 iso2022_jp_3 iso2022_jp_ext iso2022_kr latin_1 iso8859_2 iso8859_3 iso8859_4 iso8859_5 iso8859_6 iso8859_7 iso8859_8 iso8859_9 iso8859_10 iso8859_13 iso8859_14 iso8859_15 johab koi8_r koi8_u mac_cyrillic mac_greek mac_iceland mac_latin2 mac_roman mac_turkish ptcp154 shift_jis shift_jis_2004 shift_jisx0213""".strip().split(" ")

utfs = """utf_32 utf_32_be utf_32_le utf_16 utf_16_be utf_16_le utf_7 utf_8 utf_8_sig""".split()


def read_input(f, opts):
    ss = f.read()
    input_decodes = []

    if '-d' in opts:
        enc = opts['-d']
        return ((enc, ss.decode(enc)), )
    else:
        # Try to decode with utfs first
        for enc in utfs:
            try:
                input_decodes.append((enc, ss.decode(enc)))
            except Exception as e:
                pass

        if input_decodes:
            return input_decodes

        # If not, try lang-specific encodings
        for enc in encodings:
            try:
                input_decodes.append((enc, ss.decode(enc)))
            except Exception as e:
                pass

    return input_decodes

def fix_misencodes(input_decodes):
    possible = []
    for _, ss in input_decodes:
        for enc in encodings:
            for enc_orig in [opts.get('-F'),] + suspected_original_encodings:
                try:
                    possible.append(((enc, enc_orig), ss.encode(enc).decode(enc_orig)))
                except Exception as e:
                    pass

    return possible


if __name__ == "__main__":
    # Process getopt
    opts, args = getopt.getopt(sys.argv[1:], "tqfd:F:") # f for fix
    opts = dict(opts) # Convert to dict for easier access

    if len(args) >= 1:
        f = open(args[0], 'rb')
    else:
        f = sys.stdin.buffer

    inp = read_input(f, opts)
    if '-f' in opts:
        out = fix_misencodes(inp)
    else:
        out = inp

    for enc, s in out:
        print("encoding:", enc)
        if '-q' in opts:
            pass
        elif '-t' in opts:
            print(s[:200])
            print('-' * 78)
        else:
            print(s)

